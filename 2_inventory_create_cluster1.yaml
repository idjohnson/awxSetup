apiVersion: batch/v1
kind: Job
metadata:
  name: create-awx-inventory-cluster1-job
spec:
  backoffLimit: 4
  template:
    spec:
      containers:
      - name: create-awx-inventory
        image: alpine:latest
        env:
        # --- Configuration for the Organization to find ---
        - name: ORG_NAME
          value: "Freshbrewed"

        # --- Configuration for the Inventory to create ---
        - name: INVENTORY_NAME
          value: "Kubernetes-Cluster1"

        # --- AWX API Connection Details ---
        - name: AWX_API_URL
          value: "http://awx-service.default.svc:80"
        - name: AWX_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: awx-admin-password
              key: password

        command: ["/bin/sh", "-c"]
        args:
        - |
          # Exit on error, print commands
          set -ex

          echo "Installing dependencies..."
          apk add --no-cache curl jq

          # 1. FETCH ORGANIZATION ID
          echo "Fetching ID for organization: ${ORG_NAME}"
          ORG_ID=$(curl -k -f -s -u "admin:${AWX_ADMIN_PASSWORD}" "${AWX_API_URL}/api/v2/organizations/?name=${ORG_NAME}" | jq '.results[0].id')

          if [ -z "$ORG_ID" ] || [ "$ORG_ID" == "null" ]; then
            echo "Error: Could not find organization with name '${ORG_NAME}'"
            exit 1
          fi
          echo "Found Organization ID: ${ORG_ID}"

          # 2. CREATE INVENTORY AND CAPTURE ITS ID
          echo "Creating inventory: ${INVENTORY_NAME}"
          INVENTORY_PAYLOAD="{\"name\": \"${INVENTORY_NAME}\", \"organization\": ${ORG_ID}}"
          INVENTORY_ID=$(curl -k -f -s -X POST -u "admin:${AWX_ADMIN_PASSWORD}" -H "Content-Type: application/json" -d "${INVENTORY_PAYLOAD}" "${AWX_API_URL}/api/v2/inventories/" | jq '.id')

          if [ -z "$INVENTORY_ID" ] || [ "$INVENTORY_ID" == "null" ]; then
            echo "Error: Failed to create inventory '${INVENTORY_NAME}' or could not parse its ID."
            exit 1
          fi
          echo "Successfully created inventory with ID: ${INVENTORY_ID}"
          
          echo "Successfully created inventory: ${INVENTORY_NAME}"
      restartPolicy: OnFailure